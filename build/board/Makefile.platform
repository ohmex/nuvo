NAME=nuvo

ifndef PLATFORMVERSION
$(error PLATFORMVERSION is not set)
endif

ifndef SDCCVERSION
$(error SDCCVERSION is not set)
endif

ifndef TOOLSVERSION
$(error TOOLSVERSION is not set)
endif


# where to put the generated files
PLATFORMDIR?=release/v$(PLATFORMVERSION)
PARTSDIR?=parts

#
### No user serviceable part below here. ################################
#

# filename for the generated platform file
PLATFORMFILE=$(PLATFORMDIR)/$(NAME)-platform-$(PLATFORMVERSION).tar.bz2

# filename for the new platform entry
PLATFORM_ENTRY=$(PARTSDIR)/platform-entry-$(NAME)-$(PLATFORMVERSION).txt

EXCLUDES=$(addprefix --exclude=, $(IGNORE))

#
# The actual rules
#

# generate one platform entry for the new core file
$(PLATFORM_ENTRY): $(PLATFORMFILE)
	./gen_platform_entry.sh $^ "$(PLATFORMVERSION)" "$(SDCCVERSION)" "$(TOOLSVERSION)" |\
	sed "s/^/                /" > $@

$(PLATFORMFILE): | $(PLATFORMDIR)
	echo "Generating the core archive file."
	$(eval TMPDIR := $(shell mktemp -d))
	cd ../..; git archive -v HEAD:platform|tar -x -C $(TMPDIR)
	sed -i '/^tools\.nuvo/ s#{runtime.hardware.path}/tools#{runtime.tools.nuvo.path}#' $(TMPDIR)/c51/platform.txt
	tar cvjf $(PLATFORMFILE) -C $(TMPDIR) .
	rm -rf $(TMPDIR)

# make a new release directory if not present
#
# make sure to define an order-only dependency on this rule by placing it on
# the right side of a pipe symbol. This prevents rebuilding the archives
# every time.
$(PLATFORMDIR):
	mkdir -p $@
